#!/bin/bash
set -euxo pipefail

# This script assumes that it runs inside SDK container.
# OpenWRT published SDK images here: https://hub.docker.com/r/openwrt/sdk

grep -q "This is the OpenWrt SDK" /builder/README.md || {
    echo "Expecting to run inside one of OpenWRT SDK containers: https://hub.docker.com/r/openwrt/sdk "
    exit 1
}

usage() {
    echo "Usage: $0 <feed-path> <feed-type> <precompiled-binary> <package-name>"
    echo ""
    echo "  feed-path               Path or URL to the feed (e.g. /path/to/feed or https://...)"
    echo "  feed-type               Type of feed source: src-git or src-link"
    echo "  precompiled-binary      Path to the prebuilt binary to package"
    echo "  package-name            Package name"
    echo ""
    exit 1
}

# Detect architecture from the binary file and map it to rust_build_utils target
detect_binary_arch_from_bin() {
    machine=$(readelf -h "$1" | awk -F: '/Machine:/ {print $2}' | xargs)
    case "$machine" in
        "Advanced Micro Devices X86-64") echo "x86_64" ;;
        "MIPS R3000") echo "mipsel" ;;
        "AArch64") echo "aarch64" ;;
        *) echo "ERROR: unsupported ELF: $machine" >&2; exit 1 ;;
    esac
}

# SDK is provided for one target. We can find the target architecture by reading default .config file
# which is generated by `make defconfig`
parse_config_arch() {
    awk -F= '/^CONFIG_ARCH=/ {gsub(/"/, "", $2); print $2}' "$WORKDIR/.config"
}

if [ "$#" -ne 4 ]; then
    echo "ERROR: Missing or extra arguments." >&2
    usage
fi

echo "Generating OpenWrt package inside SDK container"

FEED_PATH="$1"
FEED_TYPE="$2"
PRECOMPILED_BINARY="$3"
PKG_NAME="$4"

WORKDIR=/builder
FEED_NAME=custom
cd "$WORKDIR"

# Generate default .config, it is enough to call this once so TUI wouldn't popup and block the execution.
make defconfig

# Enforce provided binary architecture matches expected SDK architecture
binary_arch=$(detect_binary_arch_from_bin "$PRECOMPILED_BINARY")
sdk_arch=$(parse_config_arch)

if [ "$binary_arch" != "$sdk_arch" ]; then
    echo "ERROR: Arch mismatch: binary=$binary_arch sdk=$sdk_arch" >&2
    exit 1
fi

workers=$(nproc)

# https://openwrt.org/docs/guide-developer/toolchain/use-buildsystem
mkdir -p dist
echo "$FEED_TYPE $FEED_NAME $FEED_PATH" > feeds.conf
./scripts/feeds update -a
./scripts/feeds install -a

# The logs overflow CI/CD log limit so they are redirected to a file instead
make package/${PKG_NAME}/compile -j"$workers" V=s PKG_BINFILE="$PRECOMPILED_BINARY" > /tmp/build.log 2>&1

# Find the resulting .ipk(there should be just one)
pkg_path=$(find "$WORKDIR/bin/packages" -type f -name "*.ipk" | head -n1)

if [ -z "$pkg_path" ]; then
    echo "ERROR: No .ipk found in $WORKDIR/bin/packages" >&2
    exit 2
fi

echo $pkg_path
